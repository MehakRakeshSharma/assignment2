Assignment-40: A Job Ready Bootcamp in c++,DSA and IOT

deque

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1. Insert  elements And return an iterator that points to the first of the newly inserted elements.

ans 1 )

#include<iostream>
#include<deque>
using namespace std;
int main ()
{
   deque<int> d={1,2,3,4,5};
   deque<int>::iterator i=d.begin();
   cout<<endl<<" Iterator returning the first element of the container (deque) : "<<*i;
    return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

2. Returns a reverse iterator which points to the last element of the deque (i.e., its reverse beginning).

ans 2 )

#include<iostream>
#include<deque>
using namespace std;
int main ()
{
   deque<int> d={1,2,3,4,5};
   deque<int>::reverse_iterator i;
   i = d.rbegin();
   cout<<endl<<" Iterator returning the last element of the container (deque) : "<<*i;
    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

3. Returns a reverse iterator which points to the position before the beginning of the deque (which is considered its reverse end).

ans 3 )

#include<iostream>
#include<deque>
using namespace std;
int main ()
{
   deque<int> d={1,2,3,4,5};
   deque<int>::reverse_iterator i;
   i = d.rend();
   cout<<endl<<" Iterator returning the first element of the container (deque) : "<<*i;
    return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

4. Return a constant iterator pointing to the first element of the container, that is, the iterator cannot be used to modify, only traverse the deque.

ans 4 )

#include<iostream>
#include<deque>
using namespace std;
int main ()
{
   deque<int> d={1,2,3,4,5};
   deque<int>::const_iterator i=d.begin();
   cout<<endl<<" Deque is : ";
   for (i;i!=d.end();i++)
   {
       cout<<" "<<*i;
   }
   return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

5. Return the maximum number of elements that a deque container can hold.

ans 5 )

#include<iostream>
#include<deque>
using namespace std;
int main ()
{
   deque<int> d;

       cout<<" Maximum elements this deque can hold : "<<d.max_size();

   return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

6. Assign values to the same or different deque container.

ans 6 )

#include<iostream>
#include<deque>
using namespace std;
int main ()
{
   deque<int> d1,d2={1,2,3};
   d1=d2;
   d2.assign(3,1);
   cout<<" Deque : "<<endl<<" d1 : ";
   for (auto i=d1.begin();i!=d1.end();i++)
   {
        cout<<" "<<*i;
   }
   cout<<endl<<" d2 : ";
   for (auto i=d2.begin();i!=d2.end();i++)
   {
        cout<<" "<<*i;
   }
   d1.assign(d2.begin(),d2.end());
    cout<<endl<<" d1 : ";
   for (auto i=d1.begin();i!=d1.end();i++)
   {
        cout<<" "<<*i;
   }
   return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

7. Return the first element and last element of the deque container.

ans 7 )

#include<iostream>
#include<deque>
using namespace std;
int main ()
{
   deque<int> d1={1,2,3};
   cout<<" Deque first element : "<<d1.front()<<endl<<" Deque last element : "<<d1.back();
   return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

8. Remove elements from a container from the specified position or range in deque.

ans 8 )

#include<iostream>
#include<deque>
using namespace std;
int main ()
{
   deque<int> d1={1,2,3,4,5,6,7,8,9};
     cout<<endl<<" d1 : ";
   for (auto i=d1.begin();i!=d1.end();i++)
   {
        cout<<" "<<*i;
   }
   cout<<endl<<" After removal of first 2 elements : "<<endl<<" d1 : ";
   d1.erase(d1.begin(),d1.begin()+2);
     for (auto i=d1.begin();i!=d1.end();i++)
   {
        cout<<" "<<*i;
   }
   return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

9. Generate a permutation of first N natural numbers having count of unique adjacent differences equal to K | Set 2 using a queue.

ans 9 )

#include <bits/stdc++.h>
using namespace std;

void K_ValuesArray(int N, int K)
{
    if (K < 1 || K >= N) {
        cout << -1;
        return;
    }
    deque<int> dq;
    for (int i = 2; i <= N; i++) {
        dq.push_back(i);
    }
    bool front = true;
    vector<int> ans;
    ans.push_back(1);
    if (K > 1) {
        front ^= 1;
        K--;
    }
    for (int i = 2; i <= N; i++) {
        if (front) {
            int val = dq.front();
            dq.pop_front();
            ans.push_back(val);
            if (K > 1) {
                K--;
                front ^= 1;
            }
        }
        else {
            int val = dq.back();
            dq.pop_back();
            ans.push_back(val);
            if (K > 1) {
                K--;
                front ^= 1;
            }}}
    for (int i = 0; i < N; i++) {
        cout << ans[i] << " ";
    }}
int main()
{
    int N = 7, K = 1;
    K_ValuesArray(N, K);

    return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

10. Check if given Strings can be made equal by inserting at most 1 String using deque.

ans 10) 

#include <bits/stdc++.h>
using namespace std;
bool areSimilar(string S1, string S2)
{ int N = S1.size();
    int M = S2.size();
    if (N == M) {
        if (S1 == S2)
            return true;
        return false;
    }
    deque<string> X, Y;
    S1.push_back(' ');
    S2.push_back(' ');

    string temp = "";
    for (int i = 0; i < N + 1; i++) {
        if (S1[i] == ' ') {
            X.push_back(temp);
            temp = "";
        }
        else {
        }}
    for (int i = 0; i < M + 1; i++) {
        if (S2[i] == ' ') {
            Y.push_back(temp);
            temp = "";
        }
        else {
            temp += S2[i];
        }}
    while (X.size() > 0 && Y.size() > 0
           && X.front() == Y.front()) {
        X.pop_front();
        Y.pop_front();
    }
    while (X.size() > 0 && Y.size() > 0
           && X.back() == Y.back()) {
        X.pop_back();
        Y.pop_back();
    }
    if (X.size() == 0 || Y.size() == 0)
        return true;
    return false;
}
int main()
{
    string S1 = "Start practicing c++";
    string S2 = "Start c++";
    if (areSimilar(S1, S2))
        cout << "True" << endl;
    else
        cout << "False" << endl;
    return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


11. How to get the first and last elements of Deque in c++ ?

ans 11)

#include<iostream>
#include<deque>
using namespace std;
int main ()
{
   deque<int> d1={1,2,3};
   cout<<" Deque first element : "<<d1.front()<<endl<<" Deque last element : "<<d1.back();
   return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


12. Given a string S containing letters and ‘#‘. The ‘#” represents a backspace. The task is to print the new string without ‘#‘. String after processing backspace characters using deque
Examples:
Input : S = "abc#de#f#ghi#jklmn#op#"
Output : abdghjklmo
Input : S = "##iNeuron##Education##hub#"
Output : iNeurEducatihu

ans 12 )



13. Segregate even and odd nodes in a Linked List using Deque.

ans 13 )

