Assignment-57 : A Job Ready Bootcamp in C++, DSA and IOT

DSA doubly linked list

1. An example of a linked list with a random pointerGiven a linked list of size N where each node has two links: one pointer points to the next node and the second pointer
points to any node in the list. The task is to create a clone of this linked list in O(N) time.

ans 1 )

#include <iostream>
#include <unordered_map>

using namespace std;

struct Node {
    int data;
    Node* next;
    Node* random;

    Node(int val) : data(val), next(nullptr), random(nullptr) {}
};

Node* cloneLinkedList(Node* head) {
    if (head == nullptr)
        return nullptr;

    unordered_map<Node*, Node*> map;

    // Step 1: Create new nodes and map original nodes to their clones
    Node* current = head;
    while (current != nullptr) {
        Node* newNode = new Node(current->data);
        map[current] = newNode;
        current = current->next;
    }

    // Step 2: Set the next and random pointers of the new nodes
    current = head;
    while (current != nullptr) {
        Node* clonedNode = map[current];
        clonedNode->next = map[current->next];
        clonedNode->random = map[current->random];
        current = current->next;
    }

    return map[head];
}

// Utility function to print the linked list
void printLinkedList(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        cout << "Data: " << current->data;
        if (current->random != nullptr)
            cout << ", Random: " << current->random->data;
        cout << endl;
        current = current->next;
    }
}

// Driver code
int main() {
    // Create a sample linked list
    Node* head = new Node(1);
    Node* second = new Node(2);
    Node* third = new Node(3);
    Node* fourth = new Node(4);
    Node* fifth = new Node(5);

    head->next = second;
    head->random = third;

    second->next = third;
    second->random = head;

    third->next = fourth;
    third->random = fifth;

    fourth->next = fifth;
    fourth->random = third;

    fifth->random = second;

    cout << "Original linked list:" << endl;
    printLinkedList(head);

    // Clone the linked list
    Node* clonedHead = cloneLinkedList(head);

    cout << "Cloned linked list:" << endl;
    printLinkedList(clonedHead);

    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

2. Given a sorted doubly linked list of positive distinct elements, the task is to find pairs in a doubly-linked list whose sum is equal to given value x, without using any extra space?

ans 2 )

#include <iostream>

using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;

    Node(int val) : data(val), prev(nullptr), next(nullptr) {}
};

void findPairs(Node* head, int x) {
    if (head == nullptr || head->next == nullptr)
        return;

    Node* left = head;
    Node* right = head;

    // Find the rightmost node of the linked list
    while (right->next != nullptr)
        right = right->next;

    bool pairFound = false;

    // Iterate until left becomes greater than or equal to right
    while (left != right && right->next != left) {
        int sum = left->data + right->data;

        if (sum == x) {
            cout << "(" << left->data << ", " << right->data << ")" << endl;
            pairFound = true;
            left = left->next;
            right = right->prev;
        } else if (sum < x) {
            left = left->next;
        } else {
            right = right->prev;
        }
    }

    if (!pairFound)
        cout << "No pairs found." << endl;
}

// Utility function to insert a node at the end of a doubly linked list
void insert(Node** head, int data) {
    Node* newNode = new Node(data);
    if (*head == nullptr) {
        *head = newNode;
    } else {
        Node* current = *head;
        while (current->next != nullptr)
            current = current->next;
        current->next = newNode;
        newNode->prev = current;
    }
}

// Driver code
int main() {
    Node* head = nullptr;

    // Sample input
    insert(&head, 1);
    insert(&head, 2);
    insert(&head, 4);
    insert(&head, 5);
    insert(&head, 6);
    insert(&head, 8);
    insert(&head, 9);

    int x = 7;

    cout << "Pairs with sum " << x << ":" << endl;
    findPairs(head, x);

    return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

3. Given a sorted doubly linked list and a value to insert, write a function to insert the value in a sorted way. Initial doubly linked list

ans 3 )

#include <iostream>

using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;

    Node(int val) : data(val), prev(nullptr), next(nullptr) {}
};

void insertSorted(Node** head, int value) {
    Node* newNode = new Node(value);

    if (*head == nullptr) {
        // If the list is empty, make the new node the head
        *head = newNode;
        return;
    }

    if (value <= (*head)->data) {
        // If the value is less than or equal to the head value,
        // insert the new node before the head
        newNode->next = *head;
        (*head)->prev = newNode;
        *head = newNode;
        return;
    }

    Node* current = *head;

    while (current->next != nullptr && current->next->data < value) {
        // Traverse the list to find the appropriate position to insert the new node
        current = current->next;
    }

    newNode->prev = current;
    newNode->next = current->next;

    if (current->next != nullptr) {
        current->next->prev = newNode;
    }

    current->next = newNode;
}

// Utility function to print the doubly linked list
void printList(Node* head) {
    Node* current = head;

    while (current != nullptr) {
        cout << current->data << " ";
        current = current->next;
    }

    cout << endl;
}

// Driver code
int main() {
    Node* head = nullptr;

    // Initial doubly linked list
    insertSorted(&head, 2);
    insertSorted(&head, 4);
    insertSorted(&head, 6);
    insertSorted(&head, 8);

    cout << "Initial doubly linked list: ";
    printList(head);

    int value = 5;

    // Insert value in a sorted way
    insertSorted(&head, value);

    cout << "Doubly linked list after inserting " << value << ": ";
    printList(head);

    return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

4. Given a sorted doubly linked list containing n nodes. The problem is removing duplicate nodes from the given list.

ans 4 )

#include <iostream>

using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;

    Node(int val) : data(val), prev(nullptr), next(nullptr) {}
};

void removeDuplicates(Node* head) {
    if (head == nullptr || head->next == nullptr)
        return;

    Node* current = head;
    Node* nextNode;

    while (current->next != nullptr) {
        if (current->data == current->next->data) {
            nextNode = current->next->next;

            while (nextNode != nullptr && nextNode->data == current->data)
                nextNode = nextNode->next;

            current->next = nextNode;
            if (nextNode != nullptr)
                nextNode->prev = current;
        } else {
            current = current->next;
        }
    }
}

// Utility function to print the doubly linked list
void printList(Node* head) {
    Node* current = head;

    while (current != nullptr) {
        cout << current->data << " ";
        current = current->next;
    }

    cout << endl;
}

// Driver code
int main() {
    Node* head = nullptr;

    // Initial sorted doubly linked list with duplicates
    head = new Node(2);
    head->next = new Node(2);
    head->next->prev = head;
    head->next->next = new Node(4);
    head->next->next->prev = head->next;
    head->next->next->next = new Node(6);
    head->next->next->next->prev = head->next->next;
    head->next->next->next->next = new Node(6);
    head->next->next->next->next->prev = head->next->next->next;

    cout << "Initial doubly linked list: ";
    printList(head);

    // Remove duplicates
    removeDuplicates(head);

    cout << "Doubly linked list after removing duplicates: ";
    printList(head);

    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

5. Given an unsorted doubly linked list containing n nodes. The problem is to remove duplicate nodes from the given list.

ans 5 )

#include <iostream>
#include <unordered_set>

using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;

    Node(int val) : data(val), prev(nullptr), next(nullptr) {}
};

void removeDuplicates(Node* head) {
    if (head == nullptr || head->next == nullptr)
        return;

    Node* current = head;

    while (current != nullptr) {
        Node* compare = current->next;

        while (compare != nullptr) {
            if (current->data == compare->data) {
                compare->prev->next = compare->next;
                if (compare->next != nullptr)
                    compare->next->prev = compare->prev;

                Node* temp = compare;
                compare = compare->next;
                delete temp;
            } else {
                compare = compare->next;
            }
        }

        current = current->next;
    }
}

// Utility function to print the doubly linked list
void printList(Node* head) {
    Node* current = head;

    while (current != nullptr) {
        cout << current->data << " ";
        current = current->next;
    }

    cout << endl;
}

// Driver code
int main() {
    Node* head = nullptr;

    // Initial unsorted doubly linked list with duplicates
    head = new Node(3);
    head->next = new Node(2);
    head->next->prev = head;
    head->next->next = new Node(2);
    head->next->next->prev = head->next;
    head->next->next->next = new Node(5);
    head->next->next->next->prev = head->next->next;
    head->next->next->next->next = new Node(3);
    head->next->next->next->next->prev = head->next->next->next;

    cout << "Initial doubly linked list: ";
    printList(head);

    // Remove duplicates
    removeDuplicates(head);

    cout << "Doubly linked list after removing duplicates: ";
    printList(head);

    return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

6. Sort the given biotonic doubly linked list. A biotonic doubly linked list is a doubly linked list which is first increasing and then decreasing. A strictly increasing or a
strictly decreasing list is also a biotonic doubly linked list.

ans 6 )

To sort a biotonic doubly linked list, which is a doubly linked list that is first increasing and then decreasing, you can follow the steps below:

Find the peak node of the biotonic list. The peak node is the node with the maximum value in the list.

Split the list into two separate lists at the peak node. The first list will be in increasing order, and the second list will be in decreasing order.

Reverse the second list to make it in increasing order.

Merge the two sorted lists together to obtain the final sorted biotonic list.

Here's the implementation of the above steps in C++:

cpp
Copy code
#include <iostream>

using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;

    Node(int val) : data(val), prev(nullptr), next(nullptr) {}
};

// Utility function to print the doubly linked list
void printList(Node* head) {
    Node* current = head;

    while (current != nullptr) {
        cout << current->data << " ";
        current = current->next;
    }

    cout << endl;
}

// Utility function to reverse a doubly linked list
Node* reverseList(Node* head) {
    if (head == nullptr || head->next == nullptr)
        return head;

    Node* current = head;
    Node* prev = nullptr;

    while (current != nullptr) {
        Node* nextNode = current->next;
        current->next = prev;
        current->prev = nextNode;
        prev = current;
        current = nextNode;
    }

    return prev;
}

// Utility function to merge two sorted doubly linked lists
Node* mergeLists(Node* list1, Node* list2) {
    if (list1 == nullptr)
        return list2;
    if (list2 == nullptr)
        return list1;

    Node* mergedList = nullptr;

    if (list1->data < list2->data) {
        mergedList = list1;
        mergedList->next = mergeLists(list1->next, list2);
    } else {
        mergedList = list2;
        mergedList->next = mergeLists(list1, list2->next);
    }

    mergedList->next->prev = mergedList;
    mergedList->prev = nullptr;

    return mergedList;
}

// Function to sort the biotonic doubly linked list
Node* sortBiotonicList(Node* head) {
    if (head == nullptr || head->next == nullptr)
        return head;

    // Find the peak node of the biotonic list
    Node* current = head;
    while (current != nullptr && current->next != nullptr && current->data < current->next->data)
        current = current->next;

    Node* list1 = head;
    Node* list2 = current->next;
    current->next = nullptr;

    // Reverse the second list to make it in increasing order
    list2 = reverseList(list2);

    // Merge the two sorted lists
    return mergeLists(list1, list2);
}

// Driver code
int main() {
    Node* head = nullptr;

    // Sample biotonic doubly linked list
    head = new Node(1);
    head->next = new Node(3);
    head->next->prev = head;
    head->next->next = new Node(5);
    head->next->next->prev = head->next;
    head->next->next->next = new Node(8);
    head->next->next->next->prev = head->next->next;
    head->next->next->next->next = new Node(6);
    head->next->next->next->next->prev = head->next->next->next;
    head->next->next->next->next->next = new Node(2);
    head->next->next->next->next->next->prev = head->next->next->next->next;

    cout << "Initial biotonic doubly linked list: ";
    printList(head);

    // Sort the biotonic list
    head = sortBiotonicList(head);

    cout << "Sorted biotonic doubly linked list: ";
    printList(head);

    return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

7. Given a doubly-linked list, rotate the linked list counter-clockwise by N nodes. Here N is a given positive integer and is smaller than the count of nodes in the linked list.

ans 7 )

#include <iostream>

using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;

    Node(int val) : data(val), prev(nullptr), next(nullptr) {}
};

// Utility function to print the doubly linked list
void printList(Node* head) {
    Node* current = head;

    while (current != nullptr) {
        cout << current->data << " ";
        current = current->next;
    }

    cout << endl;
}

// Function to rotate the doubly linked list counter-clockwise by N nodes
Node* rotateList(Node* head, int N) {
    if (head == nullptr || head->next == nullptr || N == 0)
        return head;

    // Find the Nth node from the beginning of the list
    int count = 1;
    Node* current = head;
    while (count < N && current != nullptr) {
        current = current->next;
        count++;
    }

    // If N is greater than or equal to the count of nodes, wrap around N
    if (current == nullptr)
        return head;

    // Store the Nth node and the next node as the new head of the rotated list
    Node* NthNode = current;
    Node* newHead = NthNode->next;

    // Update pointers to perform the rotation
    NthNode->next = nullptr;
    newHead->prev = nullptr;

    // Traverse to the last node of the original list
    Node* lastNode = newHead;
    while (lastNode->next != nullptr)
        lastNode = lastNode->next;

    // Set the next pointer of the last node to the head of the original list
    lastNode->next = head;
    head->prev = lastNode;

    return newHead;
}

// Driver code
int main() {
    Node* head = nullptr;

    // Sample doubly linked list
    head = new Node(1);
    head->next = new Node(2);
    head->next->prev = head;
    head->next->next = new Node(3);
    head->next->next->prev = head->next;
    head->next->next->next = new Node(4);
    head->next->next->next->prev = head->next->next;
    head->next->next->next->next = new Node(5);
    head->next->next->next->next->prev = head->next->next->next;

    cout << "Initial doubly linked list: ";
    printList(head);

    int N = 2; // Number of rotations

    // Rotate the list counter-clockwise by N nodes
    head = rotateList(head, N);

    cout << "Doubly linked list after rotation: ";
    printList(head);

    return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

8. Write a Program to reverse the Doubly Linked List.

ans 8 )

#include <iostream>

using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;

    Node(int val) : data(val), prev(nullptr), next(nullptr) {}
};

// Utility function to print the doubly linked list
void printList(Node* head) {
    Node* current = head;

    while (current != nullptr) {
        cout << current->data << " ";
        current = current->next;
    }

    cout << endl;
}

// Function to reverse the doubly linked list
Node* reverseList(Node* head) {
    if (head == nullptr || head->next == nullptr)
        return head;

    Node* current = head;
    Node* prev = nullptr;
    Node* next = nullptr;

    while (current != nullptr) {
        next = current->next;
        current->next = prev;
        current->prev = next;
        prev = current;
        current = next;
    }

    return prev;
}

// Driver code
int main() {
    Node* head = nullptr;

    // Sample doubly linked list
    head = new Node(1);
    head->next = new Node(2);
    head->next->prev = head;
    head->next->next = new Node(3);
    head->next->next->prev = head->next;
    head->next->next->next = new Node(4);
    head->next->next->next->prev = head->next->next;
    head->next->next->next->next = new Node(5);
    head->next->next->next->next->prev = head->next->next->next;

    cout << "Initial doubly linked list: ";
    printList(head);

    // Reverse the doubly linked list
    head = reverseList(head);

    cout << "Reversed doubly linked list: ";
    printList(head);

    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

9. Given a Doubly linked list containing N nodes, the task is to remove all the nodes from the list which contains elements whose digit sum is even.
Example:
Input: DLL = 18 <=> 15 <=> 8 <=> 9 <=> 14
Output: 18 <=> 9 <=> 14
Explanation:

The linked list contains :
18 -> 1 + 8 = 9
15 -> 1 + 5 = 6
8 -> 8
9 -> 9
14 -> 1 + 4 = 5
Here, digit sum for nodes containing 15 and 8 are even.
Hence, these nodes have been deleted.
Input: DLL = 5 <=> 3 <=> 4 <=> 2 <=> 9
Output: 5 <=> 3 <=> 9
Explanation:
The linked list contains two digit sum values 4 and 2.
Hence, these nodes have been deleted.


ans 9 )

#include <iostream>
#include <string>

using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;

    Node(int val) : data(val), prev(nullptr), next(nullptr) {}
};

// Utility function to print the doubly linked list
void printList(Node* head) {
    Node* current = head;

    while (current != nullptr) {
        cout << current->data << " <=> ";
        current = current->next;
    }

    cout << "NULL" << endl;
}

// Function to calculate the digit sum of a number
int getDigitSum(int num) {
    int sum = 0;

    string strNum = to_string(num);
    for (char ch : strNum)
        sum += ch - '0';

    return sum;
}

// Function to remove nodes from the doubly linked list whose digit sum is even
Node* removeNodesWithEvenDigitSum(Node* head) {
    if (head == nullptr)
        return nullptr;

    Node* current = head;

    while (current != nullptr) {
        int digitSum = getDigitSum(current->data);

        if (digitSum % 2 == 0) {
            Node* toRemove = current;

            if (current == head)
                head = current->next;

            if (current->prev != nullptr)
                current->prev->next = current->next;

            if (current->next != nullptr)
                current->next->prev = current->prev;

            current = current->next;
            delete toRemove;
        } else {
            current = current->next;
        }
    }

    return head;
}

// Driver code
int main() {
    Node* head = nullptr;

    // Sample doubly linked list
    head = new Node(18);
    head->next = new Node(15);
    head->next->prev = head;
    head->next->next = new Node(8);
    head->next->next->prev = head->next;
    head->next->next->next = new Node(9);
    head->next->next->next->prev = head->next->next;
    head->next->next->next->next = new Node(14);
    head->next->next->next->next->prev = head->next->next->next;

    cout << "Initial doubly linked list: ";
    printList(head);

    // Remove nodes with even digit sum
    head = removeNodesWithEvenDigitSum(head);

    cout << "Doubly linked list after removing nodes with even digit sum: ";
    printList(head);

    return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

10. Given a doubly linked list containing N nodes, the task is to remove all the nodes from the list which contains Fibonacci numbers.
Example:
Input: DLL = 15 <=> 16 <=> 8 <=> 7 <=> 13
Output: 15 <=> 16 <=> 7
Explanation:
The linked list contains two fibonacci numbers 8 and 13. Hence, these nodes have been deleted.
Input: DLL = 5 <=> 3 <=> 4 <=> 2 <=> 9
Output: 4 <=> 9
Explanation:
The linked list contains three fibonacci numbers 5, 3 and 2. Hence, these nodes have been deleted.


ans 10 )


#include <iostream>

using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;

    Node(int val) : data(val), prev(nullptr), next(nullptr) {}
};

// Utility function to print the doubly linked list
void printList(Node* head) {
    Node* current = head;

    while (current != nullptr) {
        cout << current->data << " <=> ";
        current = current->next;
    }

    cout << "NULL" << endl;
}

// Function to check if a number is a Fibonacci number
bool isFibonacci(int num) {
    int prev = 0;
    int current = 1;

    while (current <= num) {
        if (current == num)
            return true;

        int next = prev + current;
        prev = current;
        current = next;
    }

    return false;
}

// Function to remove nodes from the doubly linked list containing Fibonacci numbers
Node* removeNodesWithFibonacci(Node* head) {
    if (head == nullptr)
        return nullptr;

    Node* current = head;

    while (current != nullptr) {
        if (isFibonacci(current->data)) {
            Node* toRemove = current;

            if (current == head)
                head = current->next;

            if (current->prev != nullptr)
                current->prev->next = current->next;

            if (current->next != nullptr)
                current->next->prev = current->prev;

            current = current->next;
            delete toRemove;
        } else {
            current = current->next;
        }
    }

    return head;
}

// Driver code
int main() {
    Node* head = nullptr;

    // Sample doubly linked list
    head = new Node(15);
    head->next = new Node(16);
    head->next->prev = head;
    head->next->next = new Node(8);
    head->next->next->prev = head->next;
    head->next->next->next = new Node(7);
    head->next->next->next->prev = head->next->next;
    head->next->next->next->next = new Node(13);
    head->next->next->next->next->prev = head->next->next->next;

    cout << "Initial doubly linked list: ";
    printList(head);

    // Remove nodes with Fibonacci numbers
    head = removeNodesWithFibonacci(head);

    cout << "Doubly linked list after removing Fibonacci numbers: ";
    printList(head);

    return 0;
}
