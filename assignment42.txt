
Assignment - 42 A Job Ready Bootcamp in C++, DSA and IOT

Queue


1. Print all elements of a queue in C++ STL

ans 1 )

#include <iostream>
#include <queue>

using namespace std;

int main() {
    queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    cout << "Queue elements: ";

    while (!q.empty()) {
        cout << q.front() << " ";
        q.pop();
    }

    return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

2. Create a railways ticket counter and allot ticket to first come first take using c++ STL

ans 2 )

#include <iostream>
#include <queue>

using namespace std;

int main() {
    queue<int> ticketCounter; // initialize a queue to represent the ticket counter
    int ticketNumber = 1; // initialize the first ticket number

    // simulate customers arriving at the ticket counter
    for (int i = 1; i <= 10; i++) {
        ticketCounter.push(ticketNumber); // add the customer's ticket to the queue
        cout << "Customer " << i << " takes ticket number " << ticketNumber << endl;
        ticketNumber++; // increment the ticket number for the next customer
    }

    // simulate customers being served at the ticket counter
    while (!ticketCounter.empty()) {
        cout << "Counter serves customer with ticket number " << ticketCounter.front() << endl;
        ticketCounter.pop(); // remove the customer's ticket from the queue
    }

    return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

3. Check if a queue is empty or not using queue::size() function

ans 3 )

#include <iostream>
#include <queue>

using namespace std;

int main() {
    queue<int> q;
    q.push(1);
    q.push(2);
    q.push(3);

    if (q.size() == 0) {
        cout << "The queue is empty." << endl;
    } else {
        cout << "The queue is not empty." << endl;
    }

    q.pop();
    q.pop();
    q.pop();

    if (q.size() == 0) {
        cout << "The queue is empty." << endl;
    } else {
        cout << "The queue is not empty." << endl;
    }

    return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

4. Manage a queue for multiple input and store in ascending order of his first character

ans 4 )

#include <iostream>
#include <queue>
#include <string>

using namespace std;
struct CompareFirstChar {
    bool operator()(const string& s1, const string& s2) const {
        return s1[0] > s2[0];
    }
};

int main() {
    priority_queue<string, vector<string>, CompareFirstChar> q;
    string input;
    cout << "Enter inputs (type 'done' to stop):" << endl;
    while (cin >> input && input != "done") {
        q.push(input);
    }

    cout << "The elements of the queue in ascending order of their first characters:" << endl;
    while (!q.empty()) {
        cout << q.top() << endl;
        q.pop();
    }

    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

5. Schedule a interview by using applicant's reaching time using c++ STL

ans 5 )

#include <iostream>
#include <queue>
#include <string>

using namespace std;

struct CompareReachingTime {
    bool operator()(const pair<string, int>& a1, const pair<string, int>& a2) const {
        return a1.second > a2.second;
    }
};

int main() {
    priority_queue<pair<string, int>, vector<pair<string, int>>, CompareReachingTime> interviewQueue;

    string name;
    int reachingTime;
    cout << "Enter applicants' names and reaching times (type 'done' to stop):" << endl;
    while (cin >> name && name != "done") {
        cin >> reachingTime;
        interviewQueue.push(make_pair(name, reachingTime));
    }

    cout << "Schedule of interviews in the order they will take place:" << endl;
    while (!interviewQueue.empty()) {
        pair<string, int> applicant = interviewQueue.top();
        cout << applicant.first << " - " << applicant.second << endl;
        interviewQueue.pop();
    }

    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

6. In C++ STL, Queue is a type of container that follows FIFO (First-in-First-Out) elements arrangement i.e. the elements which insert first will be removed first. In the queue, elements are inserted at one end known as "back" and are deleted from another end known as "front".empty() and size() function of the queue with the Example.

ans 6 )

#include <iostream>
#include <queue>

using namespace std;

int main() {
    queue<int> q;

    if (q.empty()) {
        cout << "The queue is empty." << endl;
    }

    q.push(10);
    q.push(20);
    q.push(30);

    cout << "The size of the queue is " << q.size() << "." << endl;

    q.pop();
    q.pop();

    cout << "The size of the queue is now " << q.size() << "." << endl;

    return 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

7. Exchange the contents of two queues but the queues must be of the same data type, although sizes may differ.

ans 7 )

#include <iostream>
#include <queue>

using namespace std;

int main() {
    // Create two queues of integers
    queue<int> q1, q2;

    // Add elements to the first queue
    q1.push(10);
    q1.push(20);
    q1.push(30);

    // Add elements to the second queue
    q2.push(40);
    q2.push(50);
    q2.push(60);
    q2.push(70);

    // Print the contents of both queues before the swap
    cout << "Before the swap:" << endl;
    cout << "Queue 1: ";
    while (!q1.empty()) {
        cout << q1.front() << " ";
        q1.pop();
    }
    cout << endl;
    cout << "Queue 2: ";
    while (!q2.empty()) {
        cout << q2.front() << " ";
        q2.pop();
    }
    cout << endl;

    // Swap the contents of the two queues using the swap() function
    q1.swap(q2);

    // Print the contents of both queues after the swap
    cout << "After the swap:" << endl;
    cout << "Queue 1: ";
    while (!q1.empty()) {
        cout << q1.front() << " ";
        q1.pop();
    }
    cout << endl;
    cout << "Queue 2: ";
    while (!q2.empty()) {
        cout << q2.front() << " ";
        q2.pop();
    }
    cout << endl;

    return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
9. Adds the element ‘g’ at the end of the queue.


ans 9 )

#include <iostream>
#include <queue>

using namespace std;

int main() {
    // Create a queue of characters
    queue<char> q;

    // Add elements to the queue
    q.push('a');
    q.push('b');
    q.push('c');
    q.push('d');
    q.push('e');
    q.push('f');

    // Add the element 'g' at the end of the queue using push()
    q.push('g');

    // Print the contents of the queue
    while (!q.empty()) {
        cout << q.front() << " ";
        q.pop();
    }
    cout << endl;

    return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

10. Deletes the first element of the queue.

ans 10 )

#include <iostream>
#include <queue>

using namespace std;

int main() {
    // Create a queue of integers
    queue<int> q;

    // Add elements to the queue
    q.push(10);
    q.push(20);
    q.push(30);
    q.push(40);
    q.push(50);

    // Delete the first element of the queue using pop()
    q.pop();

    // Print the contents of the queue
    while (!q.empty()) {
        cout << q.front() << " ";
        q.pop();
    }
    cout << endl;

    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////