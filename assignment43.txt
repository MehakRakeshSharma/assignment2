Assignment - 43 A Job Ready Bootcamp in C++, DSA and IOT

priority_queue


1. Write a c++ program, to demonstrate priority queue.

ans 1 )

#include <iostream>
#include <queue>

using namespace std;

int main() {
    priority_queue<int> pq;
    pq.push(5);
    pq.push(2);
    pq.push(8);
    pq.push(1);
    cout << "Top element: " << pq.top() << endl;
    pq.pop();
    cout << "New top element: " << pq.top() << endl;
    cout << "Queue size: " << pq.size() << endl;

    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

2. Implement different operations on priority queue .i.e. adding element, removing element, size of priority queue, and print it.

ans 2 )

#include <iostream>
#include <queue>

using namespace std;

int main() {
    priority_queue<int> pq;
    pq.push(5);
    pq.push(2);
    pq.push(8);
    pq.push(1);
    cout << "Priority queue: ";
    while (!pq.empty()) {
        cout << pq.top() << " ";
        pq.pop();
    }
    cout << endl;
    pq.push(10);
    pq.push(3);
    cout << "New priority queue: ";
    while (!pq.empty()) {
        cout << pq.top() << " ";
        pq.pop();
    }
    cout << endl;
    cout << "Queue size: " << pq.size() << endl;

    return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

3. Write a c++ program, to demonstrate priority queue having a min element at top.

ans 3 )

#include <iostream>
#include <queue>

using namespace std;

int main() {
    priority_queue<int, vector<int>, greater<int>> pq;
    pq.push(5);
    pq.push(2);
    pq.push(8);
    pq.push(1);
    cout << "Priority queue: ";
    while (!pq.empty()) {
        cout << pq.top() << " ";
        pq.pop();
    }
    cout << endl;

    return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

4. Write a c++ program, to swap the elements of two priority queues of int type.

ans 4 )

#include <iostream>
#include <queue>

using namespace std;

int main() {
    priority_queue<int> pq1, pq2;
    pq1.push(5);
    pq1.push(2);
    pq1.push(8);
    pq2.push(1);
    pq2.push(7);
    pq2.push(3);
    cout << "Before swapping:" << endl;
    cout << "Queue 1: ";
    while (!pq1.empty()) {
        cout << pq1.top() << " ";
        pq1.pop();
    }
    cout << endl;

    cout << "Queue 2: ";
    while (!pq2.empty()) {
        cout << pq2.top() << " ";
        pq2.pop();
    }
    cout << endl;
    pq1.swap(pq2);
    cout << "After swapping:" << endl;
    cout << "Queue 1: ";
    while (!pq1.empty()) {
        cout << pq1.top() << " ";
        pq1.pop();
    }
    cout << endl;

    cout << "Queue 2: ";
    while (!pq2.empty()) {
        cout << pq2.top() << " ";
        pq2.pop();
    }
    cout << endl;

    return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

5. Write a c++ program, to show that priority_queue is by default a Max Heap. Note: If elements are printed in descending order, then we have a max heap.

ans 5 )

#include <iostream>
#include <queue>

using namespace std;

int main() {
    // Create a priority queue of integers without any comparator
    priority_queue<int> pq;
    pq.push(5);
    pq.push(2);
    pq.push(8);
    pq.push(1);
    cout << "Priority queue: ";
    while (!pq.empty()) {
        cout << pq.top() << " ";
        pq.pop();
    }
    cout << endl;

    return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

6. Write a c++ program, to use priority_queue to implement min heap.

ans 6 )

#include <iostream>
#include <queue>

using namespace std;

int main() {
    // Create a priority queue of integers with a greater<int> comparator
    priority_queue<int, vector<int>, greater<int>> pq;

    // Insert some elements into the queue
    pq.push(5);
    pq.push(2);
    pq.push(8);
    pq.push(1);

    // Print the priority queue
    cout << "Priority queue: ";
    while (!pq.empty()) {
        cout << pq.top() << " ";
        pq.pop();
    }
    cout << endl;

    return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

7. Given two sorted arrays A[] and B[] of sizes N and M respectively, the task is to merge them in a sorted manner using priority_queue. Example: Input: A[] = { 5, 6, 8 }, B[] = { 4, 7,8 }
Output: 4 5 6 7 8 8


ans 7 )

#include <iostream>
#include <queue>
#include <vector>

using namespace std;

vector<int> mergeSortedArrays(int A[], int B[], int N, int M) {
    vector<int> result;
    priority_queue<int, vector<int>, greater<int>> pq;
    for (int i = 0; i < N; i++) {
        pq.push(A[i]);
    }
    for (int i = 0; i < M; i++) {
        pq.push(B[i]);
    }
    while (!pq.empty()) {
        result.push_back(pq.top());
        pq.pop();
    }
    return result;
}
int main() {
    int A[] = {5, 6, 8};
    int B[] = {4, 7, 8};
    int N = 3, M = 3;

    vector<int> result = mergeSortedArrays(A, B, N, M);

    cout << "Merged array: ";
    for (int i = 0; i < result.size(); i++) {
        cout << result[i] << " ";
    }
    cout << endl;

    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

8. Given an array arr[] of N elements, the task is to perform using priority_queue and the following operation:
● Pick the two largest element from the array and remove these element. If the elements are unequal then insert the absolute difference of the elements into the array.
● Perform the above operations until the array has 1 or no element in it. If the array has only one element left then print that element, else print “-1”.
Example:
Input: arr[] = { 3, 5, 2, 7 }
Output: 1
Explanation: The two largest elements are 7 and 5. Discard them. Since both are not equal, insert 7 – 5 = 2 into the array. Hence, arr[] = { 3, 2, 2 }
The two largest elements are 3 and 2. Discard them. Since both are not equal, insert 3 – 2 = 1 into the array. Hence, arr[] = { 1, 2 }
The two largest elements are 2 and 1. Discard them. Since both are not equal, insert 2 – 1 = 1 into the array. Hence, arr[] = { 1 } The only element left is 1. Print the value of the only element left.

ans 8 )

#include <iostream>
#include <queue>
#include <vector>
#include <cmath>

using namespace std;

int performOperations(int arr[], int N) {
    priority_queue<int> pq(arr, arr + N);

    while (pq.size() > 1) {
        int largest1 = pq.top();
        pq.pop();
        int largest2 = pq.top();
        pq.pop();

        if (largest1 != largest2) {
            int diff = abs(largest1 - largest2);
            pq.push(diff);
        }
    }

    if (pq.empty()) {
        return -1;
    } else {
        return pq.top();
    }
}

int main() {
    int arr[] = {3, 5, 2, 7};
    int N = 4;

    int result = performOperations(arr, N);

    if (result == -1) {
        cout << "No element left in the array" << endl;
    } else {
        cout << "The only element left is: " << result << endl;
    }

    return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

9. Given three arrays X[], Y[], and Z[] each consisting of N integers, the task is to find the maximum number of triplets (X[i], Y[i], Z[i]) such that (X[i] < Y[i] < Z[i]) for any permutation of the three arrays using priority_queue Input: X = {9, 6, 14, 1, 8}, Y = {2, 10, 3, 12, 11}, Z = {15, 13, 5, 7, 4} Output: 3
Explanation: After rearranging the arrays X[], Y[] and Z[] as {1, 6, 8, 9, 14}, {3, 2, 10, 12, 11}, and {4, 7, 15, 13, 5} respectively. The increasing triplets are {1, 3, 4}, {8, 10, 15 and {9, 12, 13}.Therefore, the total count of such triplets is 3.


ans 9 )

#include <iostream>
#include <queue>
using namespace std;

int countTriplets(int X[], int Y[], int Z[], int N) {
    priority_queue<int, vector<int>, greater<int>> Q(Z, Z+N); // create min heap priority queue
    int count = 0;
    for (int i = 0; i < N; i++) {
        while (!Q.empty() && Q.top() <= Y[i]) {
            Q.pop();
        }
        count += Q.size();
        for (int j = 0; j < i; j++) {
            if (X[j] < Y[i]) {
                count++;
            }
        }
    }
    return count;
}

int main() {
    int X[] = {9, 6, 14, 1, 8};
    int Y[] = {2, 10, 3, 12, 11};
    int Z[] = {15, 13, 5, 7, 4};
    int N = sizeof(X) / sizeof(X[0]);
    cout << countTriplets(X, Y, Z, N) << endl;
    return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

10. Given an array arr[] of size N and a number K, the task is to find the length of the smallest subsequence such that the sum of the subsequence is greater than or equal to number K do it using priority_queue. Example: Input: arr[] = {2, 3, 1, 5, 6, 3, 7, 9, 14, 10, 2, 5}, K = 35 Output: 4
Smallest subsequence with the sum greater than or equal to the given sum K is {7, 9, 14, 10} Input: arr[] = {1, 2, 2, 2, 3, 4, 5, 4, 7, 6, 5, 12}, K = 70 Output:-1
Subsequence with sum greater than equal to the given sum is not possible.


ans 10 )

#include <iostream>
#include <queue>
#include <vector>
using namespace std;

int smallestSubsequenceLength(int arr[], int N, int K)
{
    priority_queue<int, vector<int>, greater<int>> pq; // min heap
    int sum = 0, length = N + 1;

    for (int i = 0; i < N; i++) {
        pq.push(arr[i]);
        sum += arr[i];

        while (!pq.empty() && sum - pq.top() >= K) {
            sum -= pq.top();
            pq.pop();
            length = min(length, (int)pq.size() + 1);
        }
    }

    return length <= N ? length : -1;
}

int main()
{
    int arr[] = {2, 3, 1, 5, 6, 3, 7, 9, 14, 10, 2, 5};
    int N = sizeof(arr) / sizeof(arr[0]);
    int K = 35;

    int result = smallestSubsequenceLength(arr, N, K);

    if (result == -1) {
        cout << "Subsequence with sum greater than equal to the given sum is not possible." << endl;
    }
    else {
        cout << "Smallest subsequence length with sum greater than or equal to K is: " << result << endl;
    }

    return 0;
}