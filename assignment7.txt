Assignment - 7 
A Job Ready Bootcamp in C++, DSA and IOT MySirG 
Iterative Control Statements (Part - 2) 

1. Write a program to find the Nth term of the Fibonnaci series.


 #include<stdio.h>
int main ()
{
    int a,b=0,c=1,d,e;
    printf ("Enter a number upto which fibonnaci series you want to print.\n");
    scanf ("%d",&a);
    printf ("The fibonnaci series upto %d terms is :\n",a);
    for (e=0;e<a;e++)
    {
        d=b+c;
        b=c;
        c=d;
    }
printf ("%d",d);
    return 0;
}

2. Write a program to print first N terms of Fibonacci series 



#include<stdio.h>
int main ()
{
    int a,b=0,c=1,d,e;
    printf ("Enter a number upto which fibonnaci series you want to print.\n");
    scanf ("%d",&a);
    printf ("The fibonnaci series upto %d terms is :\n",a);
    for (e=0;e<a;e++)
    {
        d=b+c;
        printf ("%d\n",d);
        b=c;
        c=d;
    }
    return 0;
}

3. Write a program to check whether a given number is there in the Fibonacci series or not.


#include<stdio.h>
int main ()
{
    int a,b=0,c=1,d;
    printf ("Enter a number:\n");
    scanf ("%d",&a);
    while (1)
    {
        d=b+c;
        if (d==a)
        {
            printf ("The number %d lies in the fibonnaci series",a);
            break;
        }
        if (d>a)
        {
            printf ("The number %d doesn't lies in the fibonnaci series. ",a);
            break;
        }

        b=c;
        c=d;
    }

    return 0;
}

 
4. Write a program to calculate HCF of two numbers


#include<stdio.h>
int main ()
{
    int a,b,min;
    printf ("Enter two numbers:\n");
    scanf ("%d %d",&a,&b);
    min=a<b?a:b;
    while (1)
    {
        if (a%min==0&&b%min==0)
        {
            printf ("The HCF of %d and %d is %d",a,b,min);
            break;
        }
        --min;
    }

    return 0;
}

 
5. Write a program to check whether two given numbers are co-prime numbers or not


 #include<stdio.h>
int main ()
{
    int a,b,min;
    printf ("Enter two numbers:\n");
    scanf ("%d %d",&a,&b);
    min=a<b?a:b;
    while (1)
    {
        if (a%min==0&&b%min==0)
        {
            if (min==1)
              printf  ("The numbers are co-prime");
            else
              printf ("The numbers are not co-prime");
        }
        --min;
    }

    return 0;
}

6. Write a program to print all Prime numbers under 100


#include<stdio.h>
int main ()
{
    int a,b,c=97;
    printf ("The prime numbers below 100 are:\n1 \n");

    for (a=2;a<=c;a++)
    {
        for (b=2;a%b!=0;b++)
        {


        }
        if (a==b)
            printf("%d\n",a);
    }

    return 0;
}
 
7. Write a program to print all Prime numbers between two given numbers

#include<stdio.h>
int main ()
{
    int a,b,c;
    printf ("Enter two numbers\n");
    scanf ("%d %d",&a,&c);
    printf ("The prime numbers between the given numbers are: \n");
    if (a==1)
    {
        printf ("\n1");
        a++;
    }

    for (a;a<=c;a++)
    {
        for (b=2;a%b!=0;b++)
        {


        }
        if (a==b)
            printf("\n%d\n",a);
    }

    return 0;
}

 
8. Write a program to find next Prime number of a given number 


#include<stdio.h>
int main ()
{
    int a,b;
    printf ("Enter a number:\n");
    scanf ("%d",&a);
    printf ("The prime number after %d is: \n",a);

    for (a++;;a++)
    {
        for (b=2;a%b!=0;b++)
        {


        }
        if (a==b)
        {
           printf("%d\n",a);
            break;
        }

    }
    return 0;
}


9. Write a program to check whether a given number is an Armstrong number or not 


#include<stdio.h>
int main ()
{
int a,b,c,d=1,e,count=1,digit,sum;
printf ("Enter a number:  \n");
scanf ("%d",&a);
b=a;
e=a;
for (a;a%10!=0;a=a/10)
{
    count++;
}
while (b>0)
{

    if (b>=10)
    {digit= b%10;
    b=b/10;}
    else
        digit=b%10;

    for (c=0;c<count;c++)
    {
        d=d*digit;
    }
    sum=sum +d;
}
if (sum==e)
    printf ("It's an armstrong number");
else
    printf ("It's not an armstrong number");

return 0;
}


10. Write a program to print all Armstrong numbers under 1000

#include<stdio.h>
int main ()
{
int a,count=0,b,c,sum=0,d=1,digit,e;
printf ("armstrong number under 1000 are:  \n");

for (a=0;a<1000;a++)
{

    for (a;a%10!=0;a=a/10)
{
    count++;
}
    for (b=0;b<count;b++)
    {
        digit=a%10;
        a=a/10;
        for (c=0;c<count;c++)
        {
            d=d*digit;
        }
        sum=sum+d;
    }
    if (sum==e)
        printf ("%d",e);
}

return 0;
}

